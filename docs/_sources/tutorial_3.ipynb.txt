{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tutorial 3: making a project, configuring pype  \n",
    "\n",
    "This is an introduction to _phenopype's_ landmark editor, which was designed for rapid processing of large image collections. The images used for this tutorial contain stained threespine stickleback that were photographed with a 100 mm macro lens mounted on a Canon 750D. The fish were imersed in Glycerol in a white resin tray placed underneath a camera stand. \n",
    "\n",
    "***\n",
    "* [Setting up the project](#project)\n",
    "* [Providing a scale](#scale)\n",
    "* [Placing landmarks](#landmarks)\n",
    "* [Measure specimen length](#length)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Set up project<a name=\"project\"></a>\n",
    "\n",
    "First we load the program and initate a project object where we indicate the images that contain the specimens that we want to landmark - in this case images of stickleback (using the `include` argument)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "----------------------------------------------------------------\n",
      "Project settings\n",
      "================\n",
      "\n",
      "Project name: landmarks\n",
      "Image directory: images\n",
      "Search mode: dir\n",
      "Filetypes: []\n",
      "Include:['stickle']\n",
      "Exclude: []\n",
      "----------------------------------------------------------------\n",
      "Search returned following files: \n",
      "['stickle1.jpg', 'stickle2.jpg', 'stickle3.jpg']\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import phenopype as pp\n",
    "\n",
    "## for this tutorial, you should be in the \"tutorial directory of phenopype-master\"\n",
    "#os.getcwd()\n",
    "#os.chdir(\"tutorials\")\n",
    "\n",
    "my_proj = pp.project_maker(image_dir = \"images\", include=[\"stickle\"], name=\"landmarks\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Provide a scale <a name=\"scale\"></a>\n",
    "\n",
    "As shown in [Tutorial 1](Tutorial_1.ipynb#scale), we need to tell phenopype the pixel to mm ratio to give the landmarks a frame of reference. Again we load the image into the `scale_maker`, `zoom` into the scale area for better visibility, and mark the distance we specifiy - in this case 10 mm. Make sure to mark the whole scale, if you want to it to be detected in the following images. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Mark the outline of the scale by left clicking, remove points by right clicking, finish with enter.\n",
      "Finished, scale outline drawn. Now add the scale by clicking on two points with a known distance between them:\n",
      "Adding point 1 of 2 to scale\n",
      "Adding point 2 of 2 to scale\n",
      "\n",
      "\n",
      "------------------------------------------------\n",
      "Finished - your scale has 437 pixel per 10 mm.\n",
      "------------------------------------------------\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "image1 = my_proj.filepaths[0]\n",
    "scale = pp.scale_maker(image=image1, value=10, zoom=True, show=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"../assets/tutorials/scale1.png\" width=\"50%\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Placing landmarks <a name=\"landmarks\"></a>\n",
    "\n",
    "Just as in the `polygon_maker` and `object_finder` classes, the `landmark_maker` class sets up the landmarking procuedure, and the inherited function `set_landmarks` does the actual landmarking. It returns a `pandas` dataframe, which can be stored as csv. You can zoom in and out during the landmarking procedure with the mousewheel. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Add landmarks by left clicking, remove by right clicking, finish with enter.\n",
      "Point #1 with position (x=1139,y=433) added\n",
      "Point #2 with position (x=1238,y=466) added\n",
      "Point #3 with position (x=1253,y=558) added\n",
      "Point #4 with position (x=1275,y=597) added\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>id</th>\n",
       "      <th>idx</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>scale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>1</td>\n",
       "      <td>1139</td>\n",
       "      <td>433</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>2</td>\n",
       "      <td>1238</td>\n",
       "      <td>466</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>3</td>\n",
       "      <td>1253</td>\n",
       "      <td>558</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>4</td>\n",
       "      <td>1275</td>\n",
       "      <td>597</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       filename  id  idx     x    y  scale\n",
       "1  stickle1.jpg  NA    1  1139  433   43.7\n",
       "2  stickle1.jpg  NA    2  1238  466   43.7\n",
       "3  stickle1.jpg  NA    3  1253  558   43.7\n",
       "4  stickle1.jpg  NA    4  1275  597   43.7"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm = pp.landmark_maker(image=image1)\n",
    "results = lm.set_landmarks(scale=scale.current)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Depending on your preferences and the given image you can customize the landmarking procedure, e.g. with differently coloured points, bigger points or labels, or greater zoom. Consult `help()` for details"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "lm = pp.landmark_maker(image=image1)\n",
    "results = lm.set_landmarks(point_col=pp.green, point_size=5, label_size=2, zoom_factor=10, scale=scale.current)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "help(lm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To enter a sample number or the specimen ID you can specify either a custom ID string (anything other than the filename, because that will be stored anyways), or use the special flag `\"query\"`, which will prompt a user entry. If you use `\"query\"`, you *have* to enter something before continuing with the next sample, or terminate using `Esc`. The entered ID will show in the upper right corner, and will be passed on to the output dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Add landmarks by left clicking, remove by right clicking, finish with enter.\n",
      "Point #1 with position (x=1241,y=375) added\n",
      "Point #2 with position (x=1778,y=562) added\n",
      "Point #3 with position (x=1814,y=613) added\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>id</th>\n",
       "      <th>idx</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>scale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>my custom ID</td>\n",
       "      <td>1</td>\n",
       "      <td>1241</td>\n",
       "      <td>375</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>my custom ID</td>\n",
       "      <td>2</td>\n",
       "      <td>1778</td>\n",
       "      <td>562</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>my custom ID</td>\n",
       "      <td>3</td>\n",
       "      <td>1814</td>\n",
       "      <td>613</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       filename            id  idx     x    y  scale\n",
       "1  stickle1.jpg  my custom ID    1  1241  375   43.7\n",
       "2  stickle1.jpg  my custom ID    2  1778  562   43.7\n",
       "3  stickle1.jpg  my custom ID    3  1814  613   43.7"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = lm.set_landmarks(ID=\"my custom ID\", scale=scale.current)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Add landmarks by left clicking, remove by right clicking, finish with enter.\n",
      "Point #1 with position (x=857,y=491) added\n",
      "Point #2 with position (x=1010,y=433) added\n",
      "Point #3 with position (x=1029,y=510) added\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>id</th>\n",
       "      <th>idx</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>scale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>142501</td>\n",
       "      <td>1</td>\n",
       "      <td>857</td>\n",
       "      <td>491</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>142501</td>\n",
       "      <td>2</td>\n",
       "      <td>1010</td>\n",
       "      <td>433</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>stickle1.jpg</td>\n",
       "      <td>142501</td>\n",
       "      <td>3</td>\n",
       "      <td>1029</td>\n",
       "      <td>510</td>\n",
       "      <td>43.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       filename      id  idx     x    y  scale\n",
       "1  stickle1.jpg  142501    1   857  491   43.7\n",
       "2  stickle1.jpg  142501    2  1010  433   43.7\n",
       "3  stickle1.jpg  142501    3  1029  510   43.7"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.set_landmarks(ID=\"query\", scale=scale.current)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Measure specimen length <a name=\"landmarks\"></a>\n",
    "\n",
    "To measure specimen length you can add the parameter `draw_line=True`, which will prompt a second interaction after the landmarking step. To be useful for \"curved\" species, use as many knots for the line as needed and *phenopype* will automotically calculate the length of a curved arc, and add it to the results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Add landmarks by left clicking, remove by right clicking, finish with enter.\n",
      "Point #1 with position (x=980,y=529) added\n",
      "Point #2 with position (x=1135,y=463) added\n",
      "Point #3 with position (x=1380,y=529) added\n",
      "\n",
      "Add line-points by left clicking, remove by right clicking, finish with enter.\n",
      "Point #1 with position (x=970,y=565) added\n",
      "Point #2 with position (x=1672,y=419) added\n",
      "Point #3 with position (x=2142,y=372) added\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filename</th>\n",
       "      <th>id</th>\n",
       "      <th>idx</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>scale</th>\n",
       "      <th>arc_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>stickle3.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>1</td>\n",
       "      <td>980</td>\n",
       "      <td>529</td>\n",
       "      <td>43.7</td>\n",
       "      <td>1189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>stickle3.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>2</td>\n",
       "      <td>1135</td>\n",
       "      <td>463</td>\n",
       "      <td>43.7</td>\n",
       "      <td>1189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>stickle3.jpg</td>\n",
       "      <td>NA</td>\n",
       "      <td>3</td>\n",
       "      <td>1380</td>\n",
       "      <td>529</td>\n",
       "      <td>43.7</td>\n",
       "      <td>1189</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       filename  id  idx     x    y  scale  arc_length\n",
       "1  stickle3.jpg  NA    1   980  529   43.7        1189\n",
       "2  stickle3.jpg  NA    2  1135  463   43.7        1189\n",
       "3  stickle3.jpg  NA    3  1380  529   43.7        1189"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm = pp.landmark_maker(image=my_proj.filepaths[2])\n",
    "results = lm.set_landmarks(draw_line=True, scale=scale.current)\n",
    "results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "END - more tutorials to come! If you have questions in the meantime, email me. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
