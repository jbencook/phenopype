{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example 6: Counting and measuring freshwater snails\n",
    "\n",
    "In this example we will use thresholding and watershed algorithms to count freshwater snails."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"row; text-align: left\">\n",
    "    \n",
    "<div class=\"col-md-6\">\n",
    "    \n",
    "![Before](_assets/ex6_before.jpg)\n",
    "    \n",
    "**Input** - Snails photographed from a camera stand. Variable brightness across the tray and snail clumping are the biggest challenges.\n",
    "</div>\n",
    "<div class=\"col-md-6\">\n",
    "\n",
    "![After](_assets/ex6_after.jpg)\n",
    "    \n",
    "**Results** - After applying adaptive thresholding and a watershed algorithm, the snail separate well from the background. Now we can count them, and measure size, shape and colouration\n",
    "</div>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Low throughput\n",
    "\n",
    "First, we test a single image with the low throughput workflow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Directory to save files set at - E:\\git_repos\\phenopype\\_temp\\output\\ex6\n"
     ]
    }
   ],
   "source": [
    "import phenopype as pp\n",
    "import os \n",
    "\n",
    "image_dir = \"images/snails1.jpg\"\n",
    "\n",
    "ct = pp.load_image(image_dir, \n",
    "                   cont=True,  # load as container\n",
    "                   dirpath= \"../_temp/output/ex6\",  # specify save-directory\n",
    "                   save_suffix = \"snails1\") # give files a save-suffix (e.g. \"contours_ex6.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `load` method of a `container` attempts to load any previously saved results, masks, etc. from the specified `dirpath`. `reset` will only reset the modified images, as well as image and contour DataFrames. This will preserve any drawn masks or other data stemming from user interaction.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUTOLOAD\n",
      "- masks_snails1.csv\n"
     ]
    }
   ],
   "source": [
    "ct.load()\n",
    "ct.reset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Draw a mask around the snails inside the tray by dragging a rectangle around them - finish with `Enter`, abort with `Esc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- mask with label mask1 already created (overwrite=False)\n"
     ]
    }
   ],
   "source": [
    "pp.preprocessing.create_mask(ct)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll blur the image a little, convert it to a binary image, and look at the results:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- include mask \"mask1\" pixels\n"
     ]
    }
   ],
   "source": [
    "pp.segmentation.blur(ct)\n",
    "pp.segmentation.threshold(ct, \n",
    "                          method=\"adaptive\", \n",
    "                          blocksize=59, ## relatively low sensitivity\n",
    "                          constant=10) ## relatively high subtraction factor from the result\n",
    "pp.show_image(ct) # `ct` automatically shows the last edit within the container, `ct.image` would also work"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The break up the clumping, we apply the watershed algorithm to the binarized image:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "pp.segmentation.watershed(ct, distance_cutoff=0.5) # , iterations=1, kernel_size=1\n",
    "pp.show_image(ct)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this image we can find the contours - for watershed we *have* to select the `\"ccomp\"` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "pp.segmentation.find_contours(ct, \n",
    "                              retrieval=\"ccomp\", # this finds the splitted rather than the outer contours\n",
    "                              min_area=200) # noise removal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we draw the contours..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- raw image\n"
     ]
    }
   ],
   "source": [
    "pp.visualization.select_canvas(ct, # onto which image should the contours be draw\n",
    "                               canvas=\"raw\") # raw = original image\n",
    "pp.visualization.draw_contours(ct, \n",
    "                               fill=0, \n",
    "                               line_width=2, \n",
    "                               watershed=True) # this flag needs to be added\n",
    "pp.show_image(ct.canvas)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "... and save them, as well as the masks (if we need to redo this) and the canvas for quality control."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- canvas saved under ../_temp/output/ex6\\canvas_snails1.jpg (overwritten).\n",
      "- masks saved under ../_temp/output/ex6\\masks_snails1.csv (overwritten).\n",
      "- contours saved under ../_temp/output/ex6\\contours_snails1.csv (overwritten).\n"
     ]
    }
   ],
   "source": [
    "pp.export.save_canvas(ct)\n",
    "pp.export.save_masks(ct)\n",
    "pp.export.save_contours(ct)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note:** the countour csv contains BOTH the outer (unseparated=\"parent\") and inner (separated=\"child\") contours. Be sure to select the desired rows using the `\"order\"` column when analyzing."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## High throughput \n",
    "\n",
    "As for the other examples I have created a preset (`ex6`) with appropriate settings for the example. The template can be passed to the `pype` using `config_preset=\"ex6\"` - see below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "preprocessing:\n",
      "- create_mask\n",
      "segmentation:\n",
      "- blur:\n",
      "    kernel_size: 3\n",
      "- threshold:\n",
      "    method: adaptive\n",
      "    blocksize: 59\n",
      "    constant: 10\n",
      "    channel: gray\n",
      "- watershed:\n",
      "    distance_cutoff: 0.5\n",
      "- find_contours:\n",
      "    retrieval: ccomp\n",
      "    min_diameter: 0\n",
      "    min_area: 200\n",
      "measurement:\n",
      "- colour_intensity\n",
      "visualization:\n",
      "- select_canvas:\n",
      "    canvas: raw\n",
      "- draw_contours:\n",
      "    line_width: 2\n",
      "    label_width: 1\n",
      "    label_size: 1\n",
      "    fill: 0\n",
      "    watershed: true\n",
      "export:\n",
      "- save_contours:\n",
      "    overwrite: true\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import phenopype as pp\n",
    "\n",
    "image_path = r\"./images/snails1.jpg\"\n",
    "\n",
    "print(pp.presets.ex6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../_temp/output/ex6\\pype_config_snails2.yaml\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2020:04:28 18:30:46 +++--------------\n",
      "\n",
      "\n",
      "AUTOLOAD\n",
      "- masks_snails2.csv\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- mask with label mask1 already created (overwrite=False)\n",
      "SEGMENTATION\n",
      "blur\n",
      "threshold\n",
      "- include mask \"mask1\" pixels\n",
      "watershed\n",
      "find_contours\n",
      "MEASUREMENT\n",
      "colour_intensity\n",
      "VISUALIZATION\n",
      "NoneType\n",
      "select_canvas\n",
      "- raw image\n",
      "ndarray\n",
      "draw_contours\n",
      "EXPORT\n",
      "save_contours\n",
      "- contours saved under ../_temp/output/ex6\\contours_snails2.csv (overwritten).\n",
      "AUTOSAVE\n",
      "save_canvas\n",
      "- canvas saved under ../_temp/output/ex6\\canvas_snails2.jpg (overwritten).\n",
      "save_colours\n",
      "- colours not saved - file already exists (overwrite=False).\n",
      "save_masks\n",
      "- masks not saved - file already exists (overwrite=False).\n",
      "\n",
      "\n",
      "TERMINATE\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<phenopype.main.pype at 0x1bf87500f88>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pp.pype(image_path, name=\"snails2\", dirpath=r\"../_temp/output/ex6\", config_preset=\"ex6\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "../_temp/output/ex6\\pype_config_snails2.yaml\n",
      "\n",
      "\n",
      "------------+++ new pype iteration 2020:04:28 18:31:10 +++--------------\n",
      "\n",
      "\n",
      "AUTOLOAD\n",
      "- masks_snails2.csv\n",
      "PREPROCESSING\n",
      "create_mask\n",
      "- mask with label mask1 already created (overwrite=False)\n",
      "SEGMENTATION\n",
      "blur\n",
      "threshold\n",
      "- include mask \"mask1\" pixels\n",
      "watershed\n",
      "find_contours\n",
      "MEASUREMENT\n",
      "colour_intensity\n",
      "VISUALIZATION\n",
      "NoneType\n",
      "select_canvas\n",
      "- raw image\n",
      "ndarray\n",
      "draw_contours\n",
      "EXPORT\n",
      "save_contours\n",
      "- contours saved under ../_temp/output/ex6\\contours_snails2.csv (overwritten).\n",
      "AUTOSAVE\n",
      "save_canvas\n",
      "- canvas saved under ../_temp/output/ex6\\canvas_snails2.jpg (overwritten).\n",
      "save_colours\n",
      "- colours not saved - file already exists (overwrite=False).\n",
      "save_masks\n",
      "- masks not saved - file already exists (overwrite=False).\n",
      "\n",
      "\n",
      "TERMINATE\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<phenopype.main.pype at 0x1bf873b87c8>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_path = r\"./images/snails2.jpg\"\n",
    "pp.pype(image_path, \n",
    "        name=\"snails2\", \n",
    "        dirpath=r\"../_temp/output/ex6\", \n",
    "        config_preset=\"ex6\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
